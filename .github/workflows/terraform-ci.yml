name: CI Terraform Workflow

on:
  workflow_call:
    inputs:
      runs-on:
        type: string
        description: Execution Runners
      version:
        type: string
        description: Version Terraform to use
    secrets:
      terraform_token:
        required: true
    outputs:
      terraform_has_changes:
        description: 'Whether or not the Terraform plan contained changes.'
        value: "${{  jobs.terraform.outputs.terraform_has_changes }}"
      terraform_plan:
        description: 'Terraform plan in a human-readable form.'
        value: "${{ jobs.terraform.outputs.terraform_plan }}"
      terraform_output:
        description: 'The Terraform outputs in JSON format.'
        value: "${{ jobs.terraform.outputs.terraform_output }}"
    
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@625cb76050397c6b3a1789261eb129f8f39a206b
        with:
          terraform_version: ${{ inputs.version }}
          cli_config_credentials_token: ${{ secrets.terraform_token }}
  
      - name: Run terraform fmt check
        run: terraform fmt -check -diff


  plan:
    name: Plan
    env:
      TF_VAR_allowed_account_id: ${{ secrets.ALLOWED_ACCOUNT_ID }}
    outputs:
      terraform_has_changes: ${{ steps.tf.outputs.terraform_has_changes }}
      terraform_plan: "${{ steps.tf.outputs.terraform_plan }}"
      terraform_output: "${{ steps.tf.outputs.terraform_output }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@625cb76050397c6b3a1789261eb129f8f39a206b

        with:
          terraform_version: ${{ inputs.version }}

      #- name: Terraform Valite 
      #  run: terraform validate

  scan-security:
    name: tfsec sarif report
    runs-on: ubuntu-latest

    steps:
      - name: Clone repo
        uses: actions/checkout@master

      - name: tfsec
        uses: tfsec/tfsec-sarif-action@master
        with:
          sarif_file: tfsec.sarif         

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v1
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: tfsec.sarif

      - name: Comments On Pull Request
        uses: tfsec/tfsec-pr-commenter-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
  terraform-apply:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [ scan-security, plan]
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@625cb76050397c6b3a1789261eb129f8f39a206b
        with:
          terraform_version: ${{ inputs.version }}
          cli_config_credentials_token: ${{ secrets.terraform_token }}
      
      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true
 
      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ github.token }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

    #  - name: Run terraform fmt check
    #    run: terraform plan -no-color
      
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply #-auto-approve
